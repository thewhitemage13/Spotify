package org.spotify.entities;

import lombok.*;
import org.spotify.enums.TypeOfMusicCollection;

import javax.persistence.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Entity class representing a music collection.
 * <p>
 * The {@code MusicCollection} class maps to the {@code music_collections} table in the database. It represents a
 * collection of songs, associated with a performer, and includes metadata such as the collection's name, type, and
 * release date.
 * </p>
 *
 * @author Mukhammed Lolo
 * @version 1.0
 */
@NoArgsConstructor
@Getter
@Setter
@Entity
@Table(name = "music_collections")
public class MusicCollection {

    /**
     * The unique ID of the music collection.
     * <p>
     * This ID is automatically generated by the database upon insertion.
     * </p>
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long music_collection_id;

    /**
     * The name of the music collection.
     * <p>
     * This is the title of the music collection.
     * </p>
     */
    @Column(name = "music_collection_name")
    private String name;

    /**
     * The type of the music collection.
     * <p>
     * This field indicates whether the music collection is an album, single, or other type of collection.
     * It is represented as an enum {@link TypeOfMusicCollection}.
     * </p>
     */
    @Enumerated(EnumType.STRING)
    @Column(name = "type_of_collection")
    private TypeOfMusicCollection typeOfCollection;

    /**
     * The release date of the music collection.
     * <p>
     * This date represents when the music collection was released.
     * </p>
     */
    @Column(name = "release_date")
    private LocalDate releaseDate;

    /**
     * The performer associated with the music collection.
     * <p>
     * This is a many-to-one relationship, where each music collection is performed by a single performer.
     * </p>
     */
    @ManyToOne
    @JoinColumn(name = "performer_id")
    private Performer performer;

    /**
     * The list of songs in the music collection.
     * <p>
     * This is a many-to-many relationship, where a music collection can contain multiple songs and a song can
     * belong to multiple collections.
     * </p>
     */
    @ManyToMany
    @JoinTable(
            name = "music_collection_songs",
            joinColumns = @JoinColumn(name = "music_collection_id"),
            inverseJoinColumns = @JoinColumn(name = "song_id")
    )
    private List<Song> song = new ArrayList<>();

    /**
     * Adds a single song to the music collection.
     * <p>
     * This method appends the provided song to the {@code song} list.
     * </p>
     *
     * @param song the {@link Song} to be added
     */
    public void add(Song song) {
        this.song.add(song);
    }

    /**
     * Adds a list of songs to the music collection.
     * <p>
     * This method appends all the provided songs to the {@code song} list.
     * </p>
     *
     * @param song the list of {@link Song} objects to be added
     */
    public void add(List<Song> song) {
        this.song.addAll(song);
    }


    /**
     * Removes a single song from the music collection.
     * <p>
     * This method removes the provided song from the {@code song} list.
     * </p>
     *
     * @param song the {@link Song} to be removed
     */
    public void remove(Song song) {
        this.song.remove(song);
    }

    /**
     * Compares this music collection to another object.
     * <p>
     * This method compares the music collection based on its name, type, release date, performer, and song list.
     * </p>
     *
     * @param o the object to compare this music collection against
     * @return {@code true} if the objects are considered equal, {@code false} otherwise
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        MusicCollection that = (MusicCollection) o;
        return Objects.equals(name, that.name) && typeOfCollection == that.typeOfCollection && Objects.equals(releaseDate, that.releaseDate) && Objects.equals(performer, that.performer) && Objects.equals(song, that.song);
    }

    /**
     * Returns a hash code value for this music collection.
     * <p>
     * This method generates a hash code based on the name, type, release date, performer, and song list.
     * </p>
     *
     * @return the hash code value for this music collection
     */
    @Override
    public int hashCode() {
        return Objects.hash(name, typeOfCollection, releaseDate, performer, song);
    }

    /**
     * Constructs a new {@code MusicCollection} with the specified values.
     * <p>
     * This constructor allows the creation of a {@link MusicCollection} instance with the specified ID, name,
     * type, release date, performer, and songs.
     * </p>
     *
     * @param music_collection_id the unique ID of the music collection
     * @param name the name of the music collection
     * @param typeOfCollection the type of the music collection
     * @param releaseDate the release date of the music collection
     * @param performer the performer associated with the music collection
     * @param songs the list of songs in the music collection
     */
    @Builder
    public MusicCollection(Long music_collection_id, String name, TypeOfMusicCollection typeOfCollection, LocalDate releaseDate, Performer performer, List<Song> songs) {
        this.music_collection_id = music_collection_id;
        this.name = name;
        this.typeOfCollection = typeOfCollection;
        this.releaseDate = releaseDate;
        this.performer = performer;
        this.song = songs != null ? songs : new ArrayList<>();
    }

    /**
     * Returns a string representation of the music collection.
     * <p>
     * This method provides a string description of the music collection, including its name, type, release date,
     * and list of songs.
     * </p>
     *
     * @return a string representation of the music collection
     */
    @Override
    public String toString() {
        return "MusicCollection{" +
                "name='" + name + '\'' +
                ", typeOfCollection=" + typeOfCollection +
                ", releaseDate=" + releaseDate +
                ", song=" + song +
                '}';
    }

}
