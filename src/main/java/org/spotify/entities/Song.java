package org.spotify.entities;

import lombok.*;
import org.spotify.enums.Genre;
import org.spotify.enums.TypeOfSong;

import javax.persistence.*;
import java.util.Objects;

/**
 * Entity class representing a song.
 * <p>
 * The {@code Song} class maps to the {@code songs} table in the database. It represents a song and contains
 * information about the song's name, type, duration, file path, genre, and its performer.
 * </p>
 *
 * @author Mukhammed Lolo
 * @version 1.0
 */
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
@Builder
@Entity
@Table(name = "songs")
public class Song {

    /**
     * The unique ID of the song.
     * <p>
     * This ID is automatically generated by the database upon insertion.
     * </p>
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long song_id;

    /**
     * The name of the song.
     * <p>
     * This field represents the title of the song.
     * </p>
     */
    @Column(name = "song_name")
    private String name;

    /**
     * The type of the song.
     * <p>
     * This field represents the type of the song (e.g., single, album track) as an enum value from {@link TypeOfSong}.
     * </p>
     */
    @Enumerated(EnumType.STRING)
    @Column(name = "type_of_song")
    private TypeOfSong typeOfSong;

    /**
     * The duration of the song in seconds.
     * <p>
     * This field represents the duration of the song in seconds.
     * </p>
     */
    @Column(name = "duration")
    private int duration;

    /**
     * The file path to the song's audio file.
     * <p>
     * This field represents the location of the song's file on the file system or server.
     * </p>
     */
    @Column(name = "file_path")
    private String filePath;

    /**
     * The file path to the song's audio file.
     * <p>
     * This field represents the location of the song's file on the file system or server.
     * </p>
     */
    @Enumerated(EnumType.STRING)
    @Column(name = "genre")
    private Genre genre;

    /**
     * The performer of the song.
     * <p>
     * This field represents the {@link Performer} associated with the song.
     * </p>
     */
    @ManyToOne
    @JoinColumn(name = "performer_id")
    private Performer performer;

    /**
     * Compares this song to another object.
     * <p>
     * This method compares the song based on its name, type, duration, file path, and genre.
     * </p>
     *
     * @param o the object to compare this song against
     * @return {@code true} if the objects are considered equal, {@code false} otherwise
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Song song = (Song) o;
        return duration == song.duration && Objects.equals(name, song.name) && typeOfSong == song.typeOfSong && Objects.equals(filePath, song.filePath) && genre == song.genre;
    }

    /**
     * Returns a hash code value for this song.
     * <p>
     * This method generates a hash code based on the song's name, type, duration, file path, and genre.
     * </p>
     *
     * @return the hash code value for this song
     */
    @Override
    public int hashCode() {
        return Objects.hash(name, typeOfSong, duration, filePath, genre);
    }

    /**
     * Returns a string representation of the song.
     * <p>
     * This method provides a string description of the song, including its name, type, duration, file path, and genre.
     * </p>
     *
     * @return a string representation of the song
     */
    @Override
    public String toString() {
        return "Song{" +
                "name='" + name + '\'' +
                ", typeOfSong=" + typeOfSong +
                ", duration=" + duration +
                ", filePath='" + filePath + '\'' +
                ", genre=" + genre +
                '}';
    }

}
